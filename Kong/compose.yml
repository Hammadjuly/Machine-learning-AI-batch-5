version: '3.9'

services:
  api:
    build:
      context: ./todo
      dockerfile: Dockerfile.dev
    volumes:
      - ./todo:/code
    depends_on:
      - postgres_db
    environment:
      - DATABASE_URL=postgresql://ziakhan:my_password@postgres_db:5432/mydatabase
      - KAFKA_BOOTSTRAP_SERVERS=broker:19092
    ports:
      - "8000:8000"
    networks:
      - default

  api2:
    build:
      context: ./microservice_02
      dockerfile: Dockerfile.dev
    volumes:
      - ./microservice_02:/code
    depends_on:
      - postgres_db
    environment:
      - DATABASE_URL=postgresql://ziakhan:my_password@postgres_db:5432/mydatabase
      - KAFKA_BOOTSTRAP_SERVERS=broker:19092
    ports:
      - "8003:8000"
    networks:
      - default

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/code
    environment:
      - API_URL=http://api:8000
    ports:
      - "8501:8501"
    networks:
      - default

  postgres_db:
    image: postgres:latest
    container_name: PostgresCont
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
    ports:
      - '5433:5432'
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - default

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
    networks:
      - default

  kong:
    image: kong:latest
    container_name: kong
    depends_on:
      - kong-migrate
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "kong-database"
      KONG_PG_USER: "kong"
      KONG_PG_PASSWORD: "my_password"
      KONG_PG_DATABASE: "kong"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"  # Kong Manager
      KONG_PORTAL_GUI_HOST: "0.0.0.0:8004"  # Dev Portal
    ports:
      - "8001:8001"
      - "8002:8002"  # Kong Manager
      - "8004:8004"  # Dev Portal
      - "8443:8443"
    networks:
      - default

  kong-database:
    image: postgres:latest
    container_name: kong-database
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=my_password
    ports:
      - '5434:5432'
    networks:
      - default

  kong-migrate:
    image: kong:latest
    container_name: kong-migrate
    depends_on:
      - kong-database
    command: ["kong", "migrations", "bootstrap"]
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "kong-database"
      KONG_PG_USER: "kong"
      KONG_PG_PASSWORD: "my_password"
      KONG_PG_DATABASE: "kong"
    networks:
      - default

networks:
  default:

volumes:
  postgres_db:
